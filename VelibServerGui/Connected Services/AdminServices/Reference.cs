//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VelibServerGui.AdminServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminServices.IAdminServices")]
    public interface IAdminServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/GetAbsoluteExpiration", ReplyAction="http://tempuri.org/IAdminServices/GetAbsoluteExpirationResponse")]
        System.DateTime GetAbsoluteExpiration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/GetAbsoluteExpiration", ReplyAction="http://tempuri.org/IAdminServices/GetAbsoluteExpirationResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetAbsoluteExpirationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/GetSlidingExpiration", ReplyAction="http://tempuri.org/IAdminServices/GetSlidingExpirationResponse")]
        System.TimeSpan GetSlidingExpiration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/GetSlidingExpiration", ReplyAction="http://tempuri.org/IAdminServices/GetSlidingExpirationResponse")]
        System.Threading.Tasks.Task<System.TimeSpan> GetSlidingExpirationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/SetAbsoluteExpiration", ReplyAction="http://tempuri.org/IAdminServices/SetAbsoluteExpirationResponse")]
        void SetAbsoluteExpiration(System.DateTime absoluteExpiration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/SetAbsoluteExpiration", ReplyAction="http://tempuri.org/IAdminServices/SetAbsoluteExpirationResponse")]
        System.Threading.Tasks.Task SetAbsoluteExpirationAsync(System.DateTime absoluteExpiration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/SetSlidingExpiration", ReplyAction="http://tempuri.org/IAdminServices/SetSlidingExpirationResponse")]
        void SetSlidingExpiration(System.TimeSpan slidingExpiration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/SetSlidingExpiration", ReplyAction="http://tempuri.org/IAdminServices/SetSlidingExpirationResponse")]
        System.Threading.Tasks.Task SetSlidingExpirationAsync(System.TimeSpan slidingExpiration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/ClearCache", ReplyAction="http://tempuri.org/IAdminServices/ClearCacheResponse")]
        void ClearCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminServices/ClearCache", ReplyAction="http://tempuri.org/IAdminServices/ClearCacheResponse")]
        System.Threading.Tasks.Task ClearCacheAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServicesChannel : VelibServerGui.AdminServices.IAdminServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServicesClient : System.ServiceModel.ClientBase<VelibServerGui.AdminServices.IAdminServices>, VelibServerGui.AdminServices.IAdminServices {
        
        public AdminServicesClient() {
        }
        
        public AdminServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.DateTime GetAbsoluteExpiration() {
            return base.Channel.GetAbsoluteExpiration();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetAbsoluteExpirationAsync() {
            return base.Channel.GetAbsoluteExpirationAsync();
        }
        
        public System.TimeSpan GetSlidingExpiration() {
            return base.Channel.GetSlidingExpiration();
        }
        
        public System.Threading.Tasks.Task<System.TimeSpan> GetSlidingExpirationAsync() {
            return base.Channel.GetSlidingExpirationAsync();
        }
        
        public void SetAbsoluteExpiration(System.DateTime absoluteExpiration) {
            base.Channel.SetAbsoluteExpiration(absoluteExpiration);
        }
        
        public System.Threading.Tasks.Task SetAbsoluteExpirationAsync(System.DateTime absoluteExpiration) {
            return base.Channel.SetAbsoluteExpirationAsync(absoluteExpiration);
        }
        
        public void SetSlidingExpiration(System.TimeSpan slidingExpiration) {
            base.Channel.SetSlidingExpiration(slidingExpiration);
        }
        
        public System.Threading.Tasks.Task SetSlidingExpirationAsync(System.TimeSpan slidingExpiration) {
            return base.Channel.SetSlidingExpirationAsync(slidingExpiration);
        }
        
        public void ClearCache() {
            base.Channel.ClearCache();
        }
        
        public System.Threading.Tasks.Task ClearCacheAsync() {
            return base.Channel.ClearCacheAsync();
        }
    }
}
